# -*- coding: utf-8 -*-
"""
Aplicaci√≥n Streamlit: An√°lisis Geoespacial de Hospitales en Per√∫
Grupo 1-2-10

INSTRUCCIONES PARA COLAB:
1. Guarda este archivo como 'app.py' en tu directorio de trabajo
2. Ejecuta las celdas de instalaci√≥n y configuraci√≥n primero
3. Luego ejecuta la celda que inicia Streamlit con localtunnel
"""

import streamlit as st
import pandas as pd
import numpy as np
import geopandas as gpd
import folium
from folium import Marker, Circle, CircleMarker
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
import matplotlib.pyplot as plt
import seaborn as sns
from shapely.geometry import Point
import requests
from io import BytesIO
from PIL import Image

# ============================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ============================================
st.set_page_config(
    page_title="Hospitales Per√∫ - An√°lisis Geoespacial",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# FUNCIONES DE CARGA DE DATOS
# ============================================
@st.cache_data
def load_hospital_data():
    """Carga y procesa datos de hospitales IPRESS"""
    url = "https://github.com/luchoravar/Hospitals-Access-Peru/raw/main/code/data/IPRESS.csv"
    r = requests.get(url)
    r.raise_for_status()
    raw_data = r.content
    texto = raw_data.decode("latin1", errors="ignore")
    
    # Crear DataFrame
    from io import StringIO
    df = pd.read_csv(StringIO(texto))
    
    # Filtrar: solo hospitales operativos
    df = df[df["Condici√≥n"] == "EN FUNCIONAMIENTO"]
    
    # Filtrar: coordenadas v√°lidas
    df = df.dropna(subset=["NORTE", "ESTE"])
    df = df[(df["NORTE"] != 0) & (df["ESTE"] != 0)]
    
    # Filtrar: solo hospitales
    df = df[df["Clasificaci√≥n"].isin([
        "HOSPITALES O CLINICAS DE ATENCION GENERAL",
        "HOSPITALES O CLINICAS DE ATENCION ESPECIALIZADA"
    ])]
    
    # Corregir UBIGEO (rellenar con ceros)
    df['UBIGEO'] = df['UBIGEO'].astype(str).str.zfill(6)
    
    return df

@st.cache_data
def load_district_shapefile():
    """Carga shapefile de distritos"""
    import tempfile
    import os
    
    # Clonar repositorio temporal
    with tempfile.TemporaryDirectory() as tmpdir:
        os.system(f"git clone https://github.com/luchoravar/Hospitals-Access-Peru.git {tmpdir}/repo 2>/dev/null")
        maps = gpd.read_file(f"{tmpdir}/repo/code/data/Distritos/DISTRITOS.shp")
    
    maps = maps[['IDDIST', 'geometry']]
    maps = maps.rename({'IDDIST':'UBIGEO'}, axis=1)
    maps['UBIGEO'] = maps['UBIGEO'].astype(str).astype(int)
    maps = maps.to_crs(epsg=4326)
    
    return maps

@st.cache_data
def load_population_centers():
    """Carga centros poblados"""
    url = "https://github.com/luchoravar/Hospitals-Access-Peru/raw/main/code/data/CCPP_0.zip"
    CCPP = gpd.read_file(f"zip+{url}")
    CCPP = CCPP.to_crs("EPSG:4326")
    return CCPP

# ============================================
# FUNCIONES DE PROCESAMIENTO
# ============================================
@st.cache_data
def create_district_dataset(_maps, df):
    """Crea dataset agregado por distrito"""
    # Tabla de frecuencias por UBIGEO
    tabla_freq = df['UBIGEO'].value_counts().reset_index()
    tabla_freq.columns = ['UBIGEO', 'Frecuencia']
    
    # Merge
    _maps["UBIGEO"] = _maps["UBIGEO"].astype(int)
    tabla_freq["UBIGEO"] = tabla_freq["UBIGEO"].astype(int)
    
    dataset = pd.merge(_maps, tabla_freq, how="left", on="UBIGEO")
    dataset["Frecuencia"] = dataset["Frecuencia"].fillna(0).astype(int)
    
    return gpd.GeoDataFrame(dataset, geometry="geometry", crs="EPSG:4326")

@st.cache_data
def create_department_summary(df):
    """Crea resumen por departamento"""
    hosp_por_dep = df.groupby("Departamento", as_index=False).agg(
        Total_hospitales=("Nombre del establecimiento", "count")
    )
    hosp_por_dep = hosp_por_dep.sort_values(
        by="Total_hospitales",
        ascending=False
    ).reset_index(drop=True)
    
    return hosp_por_dep

@st.cache_data
def proximity_analysis(_CCPP, _maps):
    """An√°lisis de proximidad para Lima y Loreto"""
    # Filtrar regiones
    centros_sel = _CCPP[_CCPP["DEP"].isin(["LIMA", "LORETO"])].copy()
    hosp_sel = _maps[_maps["UBIGEO"].astype(str).str[:2].isin(['15', '16'])].copy()
    
    # Reproyectar a m√©trico
    centros_sel = centros_sel.to_crs("EPSG:32718")
    hosp_sel = hosp_sel.to_crs("EPSG:32718")
    
    # Buffers de 10 km
    centros_sel["buffer_10km"] = centros_sel.geometry.buffer(10000)
    
    # Contar hospitales
    hospitales_count = []
    for idx, row in centros_sel.iterrows():
        buffer = row["buffer_10km"]
        dentro = hosp_sel[hosp_sel.intersects(buffer)]
        hospitales_count.append(len(dentro))
    
    centros_sel["Hosp_10km"] = hospitales_count
    
    # Separar por regi√≥n
    centros_lima = centros_sel[centros_sel["DEP"] == "LIMA"].copy()
    centros_loreto = centros_sel[centros_sel["DEP"] == "LORETO"].copy()
    
    # Identificar extremos
    results = {
        'aislado_lima': centros_lima.loc[centros_lima["Hosp_10km"].idxmin()],
        'concentrado_lima': centros_lima.loc[centros_lima["Hosp_10km"].idxmax()],
        'aislado_loreto': centros_loreto.loc[centros_loreto["Hosp_10km"].idxmin()],
        'concentrado_loreto': centros_loreto.loc[centros_loreto["Hosp_10km"].idxmax()]
    }
    
    # Hospitales en cada buffer
    for key in results.keys():
        centro = results[key]
        hosp_buffer = hosp_sel[hosp_sel.intersects(centro["buffer_10km"])].to_crs("EPSG:4326")
        results[f'hosp_{key}'] = hosp_buffer
    
    # Reproyectar centros a EPSG:4326
    for key in ['aislado_lima', 'concentrado_lima', 'aislado_loreto', 'concentrado_loreto']:
        results[key] = gpd.GeoDataFrame([results[key]], crs="EPSG:32718").to_crs("EPSG:4326").iloc[0]
    
    return results

# ============================================
# CARGAR DATOS
# ============================================
with st.spinner('Cargando datos... ‚è≥'):
    df = load_hospital_data()
    maps = load_district_shapefile()
    CCPP = load_population_centers()
    dataset = create_district_dataset(maps, df)
    hosp_por_dep = create_department_summary(df)

# ============================================
# SIDEBAR
# ============================================
st.sidebar.title("üè• An√°lisis de Hospitales")
st.sidebar.markdown("---")
st.sidebar.info("""
**Proyecto:** An√°lisis Geoespacial de Hospitales en Per√∫

**Fuente de datos:**
- MINSA - IPRESS
- Centros Poblados

**Grupo:** 1-2-10
""")

# ============================================
# TABS PRINCIPALES
# ============================================
tab1, tab2, tab3 = st.tabs(["üóÇÔ∏è Descripci√≥n de Datos", "üó∫Ô∏è Mapas Est√°ticos & Departamentos", "üåç Mapas Din√°micos"])

# ============================================
# TAB 1: DESCRIPCI√ìN DE DATOS
# ============================================
with tab1:
    st.header("üóÇÔ∏è Descripci√≥n de los Datos")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Hospitales", f"{len(df):,}")
    with col2:
        st.metric("Total de Distritos", f"{dataset['UBIGEO'].nunique():,}")
    with col3:
        st.metric("Total de Departamentos", f"{df['Departamento'].nunique()}")
    
    st.markdown("---")
    
    st.subheader("üìã Unidad de An√°lisis")
    st.write("""
    **Hospitales p√∫blicos operativos** en el Per√∫, seg√∫n el registro IPRESS del Ministerio de Salud (MINSA).
    """)
    
    st.subheader("üìä Fuentes de Datos")
    st.write("""
    - **IPRESS (MINSA):** Registro de establecimientos de salud
    - **Centros Poblados:** Shapefile de localidades pobladas del Per√∫
    - **Distritos:** Shapefile de divisi√≥n pol√≠tico-administrativa
    """)
    
    st.subheader("üîç Reglas de Filtrado")
    st.write("""
    1. **Condici√≥n:** Solo hospitales con estado "EN FUNCIONAMIENTO"
    2. **Coordenadas:** Solo registros con latitud/longitud v√°lidas (no nulas, no cero)
    3. **Clasificaci√≥n:** Solo establecimientos clasificados como:
       - Hospitales o cl√≠nicas de atenci√≥n general
       - Hospitales o cl√≠nicas de atenci√≥n especializada
    """)
    
    st.markdown("---")
    
    st.subheader("üìà Vista Previa de los Datos")
    st.dataframe(
        df[['Nombre del establecimiento', 'Departamento', 'Provincia', 
            'Clasificaci√≥n', 'UBIGEO', 'NORTE', 'ESTE']].head(10),
        use_container_width=True
    )
    
    st.subheader("üìä Estad√≠sticas Descriptivas")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Top 5 Departamentos con m√°s hospitales:**")
        top_deps = df['Departamento'].value_counts().head(5)
        st.dataframe(top_deps.reset_index().rename(columns={'index':'Departamento', 'Departamento':'Cantidad'}))
    
    with col2:
        st.write("**Distribuci√≥n por Clasificaci√≥n:**")
        dist_clasif = df['Clasificaci√≥n'].value_counts()
        st.dataframe(dist_clasif.reset_index().rename(columns={'index':'Tipo', 'Clasificaci√≥n':'Cantidad'}))

# ============================================
# TAB 2: MAPAS EST√ÅTICOS
# ============================================
with tab2:
    st.header("üó∫Ô∏è Mapas Est√°ticos & An√°lisis por Departamento")
    
    # Mapa 1: Choropleth por distrito
    st.subheader("1Ô∏è‚É£ Distribuci√≥n de Hospitales por Distrito")
    
    fig, ax = plt.subplots(figsize=(12, 12))
    dataset.plot(
        column='Frecuencia',
        cmap='Reds',
        linewidth=0.8,
        ax=ax,
        edgecolor='gray',
        legend=True,
        legend_kwds={'label': "N√∫mero de hospitales", 'orientation': "vertical"}
    )
    ax.set_title("Hospitales P√∫blicos por Distrito", fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel("Longitud", fontsize=12)
    ax.set_ylabel("Latitud", fontsize=12)
    ax.text(0.5, -0.05, "Fuente: Ministerio de Salud (MINSA) - Per√∫", 
            ha="center", fontsize=10, color="gray", transform=ax.transAxes)
    plt.tight_layout()
    st.pyplot(fig)
    
    st.markdown("---")
    
    # Mapa 2: Distritos sin hospitales
    st.subheader("2Ô∏è‚É£ Distritos sin Hospitales P√∫blicos")
    
    fig, ax = plt.subplots(figsize=(12, 12))
    dataset.plot(
        column='Frecuencia',
        cmap='Reds',
        linewidth=0.5,
        ax=ax,
        edgecolor='gray',
        legend=False,
        alpha=0.6
    )
    dataset[dataset['Frecuencia'] == 0].plot(
        color='lightblue',
        edgecolor='black',
        linewidth=0.5,
        ax=ax,
        label='0 hospitales'
    )
    ax.set_title("Distritos sin Hospitales P√∫blicos", fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel("Longitud", fontsize=12)
    ax.set_ylabel("Latitud", fontsize=12)
    ax.legend(loc='lower left')
    ax.text(0.5, -0.05, "Fuente: Ministerio de Salud (MINSA) - Per√∫", 
            ha="center", fontsize=10, color="gray", transform=ax.transAxes)
    plt.tight_layout()
    st.pyplot(fig)
    
    distritos_sin_hosp = (dataset['Frecuencia'] == 0).sum()
    st.info(f"üìä **{distritos_sin_hosp}** distritos ({(distritos_sin_hosp/len(dataset)*100):.1f}%) no tienen hospitales p√∫blicos")
    
    st.markdown("---")
    
    # Mapa 3: Top 10 distritos
    st.subheader("3Ô∏è‚É£ Top 10 Distritos con M√°s Hospitales")
    
    top10 = dataset.nlargest(10, 'Frecuencia')
    
    fig, ax = plt.subplots(figsize=(12, 12))
    dataset.plot(
        color='lightgrey',
        edgecolor='white',
        linewidth=0.3,
        ax=ax
    )
    top10.plot(
        column='Frecuencia',
        cmap='viridis',
        linewidth=0.8,
        edgecolor='black',
        ax=ax,
        legend=True,
        legend_kwds={'label': "N√∫mero de hospitales", 'orientation': "vertical"}
    )
    ax.set_title("Top 10 Distritos con M√°s Hospitales P√∫blicos", fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel("Longitud", fontsize=12)
    ax.set_ylabel("Latitud", fontsize=12)
    ax.text(0.5, -0.05, "Fuente: Ministerio de Salud (MINSA) - Per√∫", 
            ha="center", fontsize=10, color="gray", transform=ax.transAxes)
    plt.tight_layout()
    st.pyplot(fig)
    
    st.markdown("---")
    
    # An√°lisis por Departamento
    st.subheader("üìä An√°lisis por Departamento")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.write("**Resumen de Hospitales por Departamento**")
        st.dataframe(hosp_por_dep, use_container_width=True, height=400)
        
        st.metric("Mayor cantidad", 
                  f"{hosp_por_dep.iloc[0]['Departamento']}: {hosp_por_dep.iloc[0]['Total_hospitales']}")
        st.metric("Menor cantidad", 
                  f"{hosp_por_dep.iloc[-1]['Departamento']}: {hosp_por_dep.iloc[-1]['Total_hospitales']}")
    
    with col2:
        fig, ax = plt.subplots(figsize=(10, 10))
        sns.barplot(
            data=hosp_por_dep,
            x="Total_hospitales",
            y="Departamento",
            palette="Reds_r",
            ax=ax
        )
        ax.set_title("N√∫mero de Hospitales por Departamento", fontsize=14, fontweight="bold")
        ax.set_xlabel("Total de hospitales", fontsize=12)
        ax.set_ylabel("Departamento", fontsize=12)
        plt.tight_layout()
        st.pyplot(fig)

# ============================================
# TAB 3: MAPAS DIN√ÅMICOS
# ============================================
with tab3:
    st.header("üåç Mapas Din√°micos Interactivos")
    
    # Mapa Nacional Choropleth
    st.subheader("1Ô∏è‚É£ Mapa Nacional: Hospitales por Distrito")
    
    with st.spinner('Generando mapa nacional...'):
        # Crear GeoDataFrame de hospitales
        hospitales_gdf = gpd.GeoDataFrame(
            df.copy(),
            geometry=gpd.points_from_xy(df["ESTE"], df["NORTE"]),
            crs="EPSG:32718"
        )
        hospitales_4326 = hospitales_gdf.to_crs(epsg=4326)
        
        # Preparar dataset para choropleth
        dataset_choro = dataset.copy()
        dataset_choro["UBIGEO"] = dataset_choro["UBIGEO"].astype(str)
        geojson_distritos = dataset_choro.to_json()
        
        # Crear mapa
        m_national = folium.Map(location=[-9.19, -75.02], zoom_start=5, tiles="CartoDB positron")
        
        # Choropleth
        folium.Choropleth(
            geo_data=geojson_distritos,
            name="choropleth",
            data=dataset_choro,
            columns=["UBIGEO", "Frecuencia"],
            key_on="feature.properties.UBIGEO",
            fill_color="YlOrRd",
            fill_opacity=0.8,
            line_opacity=0.2,
            legend_name="N√∫mero de hospitales por distrito",
            nan_fill_color="white"
        ).add_to(m_national)
        
        # Tooltip
        folium.GeoJson(
            data=geojson_distritos,
            name="Distritos (tooltip)",
            tooltip=folium.GeoJsonTooltip(
                fields=["UBIGEO", "Frecuencia"],
                aliases=["UBIGEO:", "N¬∞ hospitales:"],
                localize=True
            ),
            style_function=lambda x: {'fillOpacity':0, 'color': 'none'}
        ).add_to(m_national)
        
        # MarkerCluster
        marker_cluster = MarkerCluster(name="Hospitales").add_to(m_national)
        for _, row in hospitales_4326.iterrows():
            popup_text = f"{row.get('Nombre del establecimiento','Hospital')}<br>Dept: {row.get('Departamento','')}"
            folium.Marker(
                location=[row.geometry.y, row.geometry.x],
                popup=popup_text,
                icon=folium.Icon(color="red", icon="plus-sign")
            ).add_to(marker_cluster)
        
        folium.LayerControl().add_to(m_national)
        
        folium_static(m_national, width=1200, height=600)
    
    st.markdown("---")
    
    # Mapa de Proximidad Lima & Loreto
    st.subheader("2Ô∏è‚É£ An√°lisis de Proximidad: Lima & Loreto")
    st.info("üîç Radio de an√°lisis: 10 km alrededor de cada centro poblado")
    
    with st.spinner('Calculando an√°lisis de proximidad...'):
        proximity_results = proximity_analysis(CCPP, maps)
        
        # Mostrar resultados
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üî¥ Lima")
            st.metric("Centro m√°s aislado", 
                      proximity_results['aislado_lima']['NOM_POBLAD'],
                      f"{proximity_results['aislado_lima']['Hosp_10km']} hospitales")
            st.metric("Centro m√°s concentrado", 
                      proximity_results['concentrado_lima']['NOM_POBLAD'],
                      f"{proximity_results['concentrado_lima']['Hosp_10km']} hospitales")
        
        with col2:
            st.markdown("### üü† Loreto")
            st.metric("Centro m√°s aislado", 
                      proximity_results['aislado_loreto']['NOM_POBLAD'],
                      f"{proximity_results['aislado_loreto']['Hosp_10km']} hospitales")
            st.metric("Centro m√°s concentrado", 
                      proximity_results['concentrado_loreto']['NOM_POBLAD'],
                      f"{proximity_results['concentrado_loreto']['Hosp_10km']} hospitales")
        
        # Crear mapa
        m_proximity = folium.Map(location=[-9.19, -75.02], zoom_start=6, tiles='OpenStreetMap')
        
        def dibujar_centro(m, centro, color_circle, color_marker, label, hosp_data):
            centroide = centro.geometry.centroid
            folium.Circle(
                location=[centroide.y, centroide.x],
                radius=10000,
                color=color_circle,
                fill=True,
                fill_color=color_circle,
                fill_opacity=0.15,
                weight=3,
                popup=f"{label}<br>{centro['NOM_POBLAD']}<br>Hosp: {centro['Hosp_10km']}"
            ).add_to(m)
            
            folium.Marker(
                location=[centroide.y, centroide.x],
                tooltip=f"{label} - {centro['NOM_POBLAD']}: {centro['Hosp_10km']} hospitales",
                icon=folium.Icon(color=color_marker, icon="home", prefix='fa')
            ).add_to(m)
            
            for _, hosp in hosp_data.iterrows():
                hosp_centroid = hosp.geometry.centroid
                folium.CircleMarker(
                    location=[hosp_centroid.y, hosp_centroid.x],
                    radius=4,
                    color=color_marker,
                    fill=True,
                    fill_color=color_marker,
                    fill_opacity=0.9,
                    popup="Hospital"
                ).add_to(m)
        
        # Dibujar todos los centros
        dibujar_centro(m_proximity, proximity_results['aislado_lima'], "red", "red", 
                       "üî¥ LIMA - Aislado", proximity_results['hosp_aislado_lima'])
        dibujar_centro(m_proximity, proximity_results['concentrado_lima'], "green", "green", 
                       "üü¢ LIMA - Concentrado", proximity_results['hosp_concentrado_lima'])
        dibujar_centro(m_proximity, proximity_results['aislado_loreto'], "orange", "orange", 
                       "üü† LORETO - Aislado", proximity_results['hosp_aislado_loreto'])
        dibujar_centro(m_proximity, proximity_results['concentrado_loreto'], "blue", "blue", 
                       "üîµ LORETO - Concentrado", proximity_results['hosp_concentrado_loreto'])
        
        # Leyenda
        legend_html = '''
        <div style="position: fixed; bottom: 50px; right: 50px; width: 280px;
                    background: white; border:2px solid grey; z-index:9999;
                    font-size:13px; padding: 10px; border-radius: 5px;">
        <h4>üìä Leyenda</h4>
        <p><span style="color:red;">‚≠ï</span> Lima aislado</p>
        <p><span style="color:green;">‚≠ï</span> Lima concentrado</p>
        <p><span style="color:orange;">‚≠ï</span> Loreto aislado</p>
        <p><span style="color:blue;">‚≠ï</span> Loreto concentrado</p>
        <p style="font-size:11px; color:gray;">‚óè Hospitales dentro del radio</p>
        </div>
        '''
        m_proximity.get_root().html.add_child(folium.Element(legend_html))
        
        folium_static(m_proximity, width=1200, height=600)

# ============================================
# FOOTER
# ============================================
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray; padding: 20px;'>
    <p>üè• <b>An√°lisis Geoespacial de Hospitales en Per√∫</b></p>
    <p>Fuente de datos: Ministerio de Salud (MINSA) - Per√∫ | Grupo 1-2-10</p>
</div>
""", unsafe_allow_html=True)
